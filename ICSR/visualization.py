import os

import matplotlib.pyplot as plt
import torch
from sklearn.datasets import load_digits, load_iris
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import numpy as np


def to_numpy(tensor):
    if torch.is_tensor(tensor):
        return tensor.cpu().numpy()
    elif type(tensor).__module__ != 'numpy':
        raise ValueError("Cannot convert {} to numpy array"
                         .format(type(tensor)))
    return tensor

def visualization(x,y,y2):
    #x, y = to_numpy(x), to_numpy(y)
    
    X_tsne = TSNE(n_components=2,random_state=33).fit_transform(x)
    #X_pca = PCA(n_components=2).fit_transform(x)

    ckpt_dir="images"
    if not os.path.exists(ckpt_dir):
        os.makedirs(ckpt_dir)

    plt.figure(figsize=(10, 5))
    plt.subplot(121)
    plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y, s=2, label="t-SNE")
    plt.legend()
    plt.subplot(122)
    #plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, s=2, label="PCA")
    plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y2, s=2, label="t-SNE")
    plt.legend()
    plt.savefig('images/digits_tsne-pca.png', dpi=120)
    plt.show()

def evaluate_cluster(epochs,precision_global, recall_global, fscore_global,precision_global_b, recall_global_b, fscore_global_b, expansion_global,nmi_global, ave_precision_local,  ave_recall_local, ave_fscore_local, ave_precision_local_b,  ave_recall_local_b, ave_fscore_local_b, expansion_local, nmi_local, precision_global_refine, recall_global_refine, fscore_global_refine, precision_global_refine_b, recall_global_refine_b, fscore_global_refine_b, expansion_global_refine, nmi_refine):
    x = np.linspace(1, epochs, epochs)
    plt.figure()
    plt.suptitle('pairwise')
    plt.subplot(2,2,1)
    plt.title('precision')
    plt.plot(x,precision_global,'r',label='precision_global')
    plt.plot(x,ave_precision_local,'g',label='precision_local')
    plt.plot(x,precision_global_refine,'b',label='precision_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('precision')
    plt.subplot(2,2,2)
    plt.title('recall')
    plt.plot(x,recall_global,'r',label='recall_global')
    plt.plot(x,ave_recall_local,'g',label='precall_local')
    plt.plot(x,recall_global_refine,'b',label='recall_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('recall')
    plt.subplot(2,2,3)
    plt.title('F-Score')
    plt.plot(x,fscore_global,'r',label='fscore_global')
    plt.plot(x,ave_fscore_local,'g',label='fscore_local')
    plt.plot(x,fscore_global_refine,'b',label='fscore_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('F-score')
    plt.subplot(2,2,4)
    plt.title('NMI')
    plt.plot(x,nmi_global,'r',label='NMI_global')
    plt.plot(x,nmi_local,'g',label='NMI_local')
    plt.plot(x,nmi_refine,'b',label='NMI_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('NMI')
    plt.savefig('images/msmt17/pairwise.png')

    plt.figure()
    plt.suptitle('Bcubed')
    plt.subplot(2,2,1)
    plt.title('precision')
    plt.plot(x,precision_global_b,'r',label='precision_global')
    plt.plot(x,ave_precision_local_b,'g',label='precision_local')
    plt.plot(x,precision_global_refine_b,'b',label='precision_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('precision')
    plt.subplot(2,2,2)
    plt.title('recall')
    plt.plot(x,recall_global_b,'r',label='recall_global')
    plt.plot(x,ave_recall_local_b,'g',label='precall_local')
    plt.plot(x,recall_global_refine_b,'b',label='recall_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('recall')
    plt.subplot(2,2,3)
    plt.title('F-Score')
    plt.plot(x,fscore_global_b,'r',label='fscore_global')
    plt.plot(x,ave_fscore_local_b,'g',label='fscore_local')
    plt.plot(x,fscore_global_refine_b,'b',label='fscore_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('F-score')
    plt.subplot(2,2,4)
    plt.title('Expansion')
    plt.plot(x,expansion_global,'r',label='expansion_global')
    plt.plot(x,expansion_local,'g',label='expansion_local')
    plt.plot(x,expansion_global_refine,'b',label='expansion_refine')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('expansion')
    plt.savefig('images/msmt17/bcubed.png')

def evaluate_local_cluster(epochs,precision_global, recall_global, fscore_global,precision_global_b, recall_global_b, fscore_global_b, expansion_global,nmi_global):
    x = np.linspace(1, epochs, epochs)
    plt.figure()
    plt.suptitle('pairwise')
    plt.subplot(2,2,1)
    plt.title('precision')
    plt.plot(x,precision_global,'r',label='precision')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('precision')
    plt.subplot(2,2,2)
    plt.title('recall')
    plt.plot(x,recall_global,'r',label='recall')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('recall')
    plt.subplot(2,2,3)
    plt.title('F-Score')
    plt.plot(x,fscore_global,'r',label='fscore')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('F-score')
    plt.subplot(2,2,4)
    plt.title('NMI')
    plt.plot(x,nmi_global,'r',label='NMI')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('NMI')
    plt.savefig('images/msmt17/cam15/pairwise.png')

    plt.figure()
    plt.suptitle('Bcubed')
    plt.subplot(2,2,1)
    plt.title('precision')
    plt.plot(x,precision_global_b,'r',label='precision')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('precision')
    plt.subplot(2,2,2)
    plt.title('recall')
    plt.plot(x,recall_global_b,'r',label='recall')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('recall')
    plt.subplot(2,2,3)
    plt.title('F-Score')
    plt.plot(x,fscore_global_b,'r',label='fscore')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('F-score')
    plt.subplot(2,2,4)
    plt.title('Expansion')
    plt.plot(x,expansion_global,'r',label='expansion')
    plt.legend()
    plt.xlabel('epoch')
    plt.ylabel('expansion')
    plt.savefig('images/msmt17/cam15/bcubed.png')